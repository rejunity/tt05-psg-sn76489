--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:
    - attenuation.v
    - tone.v
    - noise.v
    - signal_edge.v
    - pwm.v
    - tt_um_rejunity_sn76489.v
  top_module:  "tt_um_rejunity_sn76489"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "ReJ aka Renaldas Zioma"
  title:        "Classic 8-bit era Programmable Sound Generator SN76489"
  language:     "Verilog"
  description:  "The SN76489 Digital Complex Sound Generator (DCSG) is a programmable sound generator chip from Texas Instruments."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This Verilog implementation is a replica of the classical **[SN76489](https://en.wikipedia.org/wiki/Texas_Instruments_SN76489)** programmable sound generator.
      With roughly a 1400 logic gates this design fits on a **single tile** of the TinyTapeout.

      ### Modern replica of a classic
      
      The main goals of this project are:

      1. closely replicate the behavior and eventually the complete **design of the original** SN76489
      2. provide a readable and well documented code for educational and hardware **preservation** purposes
      3. leverage the **modern fabrication** process

      A significant effort was put into a thorough **test suite** for regression testing and validation against the original chip behavior.

      ### Module parametrization

      The module is parameterized and can match variants from the SN76489 family. The following parametrization options are provided:

      - noise tapped bits
      - tone counter and noise LFSR shift register size
      - variable clock divider

      ### The future work

      The next step is to incorporate analog elements into the design to match the original SN76489 - DAC for each channel and an analog OpAmp for channel summation.

      # Chip technical capabilities

      - **3 square wave** tone generators
      - **1 noise** generator
      - 2 types of noise: *white* and *periodic*
      - Capable to produce a range of waves typically from **122 Hz** to **125 kHz**, defined by **10-bit** registers.
      - **16** different volume levels

      #### Registers

      The behavior of the SN76489 is defined with 8 "registers" - 4 x 4 bit volume registers, 3 x 10 bit tone registers and 1 x 3 bit noise configuration register.

      | Channel | Volume registers       | Tone & noise registers   |
      |---------|------------------------|--------------------------|
      | 0       | Channel #0 attenuation | Tone #0 frequency        |
      | 1       | Channel #1 attenuation | Tone #1 frequency        |
      | 2       | Channel #2 attenuation | Tone #2 frequency        |
      | 3       | Channel #3 attenuation | Noise type and frequency |

      #### Square wave tone generators 

      Square waves are produced by counting down the 10-bit counters. Each time the counter reaches the 0 it is reloaded with the corresponding value from the configuration register and
      the output bit of the channel is flipped producing square waves.

      #### Noise generator

      Noise is produced with 15-bit [Linear-feedback Shift Register (LFSR)](https://en.wikipedia.org/wiki/Linear-feedback_shift_register) that flips the output bit pseudo randomly.
      The shift rate of the LFSR register is controller either by one of the 3 hardcoded power-of-two dividers or output from the channel #2 tone generator is used.

      #### Attenuation

      Each of the four SN76489 channels have dedicated attenuation modules. The SN76489 has 16 steps of attenuation, each step is 2 dB and maximum possible attenuation is 28 dB.
      Note that the attenuation definition is the opposite of volume / loudness. Attenuation of 0 means maximum volume.

      Finally, all the 4 attenuated signals are summed up and are sent to the output pin of the chip.

      # Historical use of the SN76489

      The SN76489 family of programmable sound generators was introduced by Texas Instruments in 1980. Variants of the SN76489 were used in a number of home computers, game consoles and arcade boards:

      - home computers: [TI-99/4](https://en.wikipedia.org/wiki/TI-99/4A), [BBC Micro](https://en.wikipedia.org/wiki/BBC_Micro), [IBM PCjr](https://en.wikipedia.org/wiki/IBM_PCjr), [Sega SC-3000](https://en.wikipedia.org/wiki/SG-1000#SC-3000), [Tandy 1000](https://en.wikipedia.org/wiki/Tandy_1000)
      - game consoles: [ColecoVision](https://en.wikipedia.org/wiki/ColecoVision), [Sega SG-1000](https://en.wikipedia.org/wiki/SG-1000), [Sega Master System](https://en.wikipedia.org/wiki/Master_System), [Game Gear](https://en.wikipedia.org/wiki/Game_Gear), [Neo Geo Pocket](https://en.wikipedia.org/wiki/Neo_Geo_Pocket) and [Sega Genesis](https://en.wikipedia.org/wiki/Sega_Genesis)
      - arcade machines by Sega & Konami and would usually include 2 or 4 SN76489 chips
      
      The SN76489 chip family competed with the similar [General Instrument AY-3-8910](https://en.wikipedia.org/wiki/General_Instrument_AY-3-8910).

      ### The original pinout of the SN76489AN

      ```
                   ,--._.--.
            D5  -->|1    16|<-- VCC
            D6  -->|2    15|<-- D4
            D7  -->|3    14|<-- CLOCK
         ready* <--|4    13|<-- D3
           /WE  -->|5    12|<-- D2
           /ce* -->|6    11|<-- D1
      AUDIO OUT <--|7    10|<-- D0
            GND ---|8     9|    not connected*
                   `-------'
            * -- omitted from this Verilog implementation

      ```

      # Difference from the original hardware

      This Verilog implementation is a completely digital and synchronous design that differs from the original SN76489 design which incorporated analog parts.

      #### Audio signal output

      While the original chip had integrated OpAmp to sum generated channels in analog fashion, this implementation does digital signal summation and digital output.
      The module provides two alternative outputs for the generated audio signal:

      1. digital 8-bit audio output suitable for external Digital to Analog Converter (DAC)
      2. pseudo analog output with Pulse Width Modulation (PWM)

      #### Separate 4 channel output

      Outputs of all 4 channels are exposed along with the master output. This allows to validate and mix signals externally.
      In contrast the original chip was limited to a single audio output pin due to the PDIP-16 package.

      #### No DC offset

      This implementation produces unsigned output waveforms without DC offset.

      #### **/CE** and **READY** pins are omitted for simplicity

      **/CE**, chip enable control pin is omitted in this design. The behavior is the same as if **/CE** is tied *low* and the chip is considered always enabled.

      Unlike the original SN76489 which took 32 cycles to update registers, this implementation handles register writes in a single cycle and chip behaves as always **READY**.

      #### Synchronous reset and single phase clock

      The original design employed 2 phases of the clock for the operation of the registers. The original chip had no reset pin and would wake up to a random state.
      
      To make it easier to synthesize and test on FPGAs this implementation uses single clock phase and synchronous reset for registers.

      #### Externally configurable clock divider

      A configurable clock divider was introduced in this implementation. Clock divider can be controlled through **SEL0** and **SEL1** control pins and allows to select between 3 chip variants:

      1. the original SN76489 with the master clock internally divided by 16. This classical chip was intended for PAL and NTSC frequencies. However in [BBC Micro](https://en.wikipedia.org/wiki/BBC_Micro) 4 MHz clock was employed.
      2. SN94624/SN76494 variants without internal clock divider. These chips were intended for use with 250 to 500 KHz clocks.
      3. high frequency clock configuration for TinyTapeout, suitable for a range between 25 MHz and 50 Mhz. In this configuration the master clock is internally divided by 128.

      ### The reverse engineered SN76489 

      This implementation is based on the results from these reverse engineering efforts:

      1. [Annotations and analysis](https://github.com/gchiasso/76489A-analysis) of a decapped SN76489A chip.
      2. Reverse engineered [schematics](https://github.com/emu-russia/SEGAChips/tree/main/VDP/PSG) based on a decapped VDP chip from Sega Mega Drive which included a SN76496 variant.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      
      ### Test-suite

      First of all, run the test suite:

      ```
      $ cd src
      $ make
      ```

      There are a number of useful functions in [test.py](https://github.com/rejunity/tt05-psg-sn76489/blob/main/src/test.py) that simplify communication with the sound generator.

      The following example sets up 440Hz (A4) note at the full volume on the 1st channel and white noise at the half volume:
      ```
      await reset(dut)
      # Set `Channel 1` to maximum volume
      await set_volume(dut, channel='1', 15)
      # Play 440 Hz note on `Channel 1`
      await set_tone(dut, channel='1', frequency=440)
      # Set `Channel 4` (noise channel) to half volume
      await set_volume(dut, channel='4', 8)
      # Use on the 3 hardcoded divider values for noise generator
      # produces ~1 kHz white noise, if chip is clocked at 4 MHz
      await set_noise(dut, white=True, divider=512)
      ```      

      ### Record music from the Verilog simulated design

      Simulated Verilog design can be fed with the stream of register values captured on a 8-bit computer in [Video Game Music (VGM)](https://vgmrips.net/wiki/VGM_Specification) format and 
      output converted to .wav file. This process is recommended for both testing and enjoying 8-bit era music!

      ```
      $ make MODULE=record VGM=../music/CrazeeRider-title.bbc50hz.vgm
      $ cd ../output
      ```

      For a reference you can find music recorded from the chip simulation:

      - [https://www.youtube.com/watch?v=ghBGasckpSY](Crazee Rider BBC Micro game)
      - [https://www.youtube.com/watch?v=HXLAdA02I-w](MISSION76496 tune for Sega Master System)


      ### Connect chip to the speaker

      There are several ways to connect this chip to the microcontroller and speaker.

      One option is to connect off the shelf data parallel Digital to Analog Converter (DAC)
      for example [Digilent R2R Pmod](https://digilent.com/reference/pmod/pmodr2r/start) to the output pins and
      route the resulting analog audio to piezo speaker or amplifier.

      Another option is to use the Pulse Width Modulated (PWM) AUDIO OUT pin with OpAmp+capacitor based integrator or capacitor based low-pass filter and a speaker:

      ```
        uController              SN76489
        ,---------.            ,---._.---. 
        |         |    4 Mhz ->|CLK  SEL0|<-- 0
        |    GPIOx|----------->|D0   SEL1|<-- 0
        |    GPIOx|----------->|D1       |
        |    GPIOx|----------->|D2       |
        |    GPIOx|----------->|D3       |          C1
        |    GPIOx|----------->|D4       |     ,----||----.
        |    GPIOx|----------->|D5       |     |          | 
        |    GPIOx|----------->|D6       |     |  OpAmp   |        Speaker     
        |    GPIOx|----------->|D7  AUDIO|     |   |\     |            /|
        |    GPIOx|----------->|/WE  OUT |-----.---|-\    |   C2   .--/ |
        `---------'            `---------'         |  }---.---||---|    |
                                                ,--|+/             `--\ |
                                                |  |/               |  \|
                                                |                   |
                                           GND ---             GND ---  
      ```

      ### Summary of commands to communicate with the chip

      Once playback schematics of the SN76489 are established, the controller program has to send data to the chip. SN76489 is programmed by updating its internal registers via data bus.

      Below is a short summary of the communication protocol of SN76489. Please consult [SN76489 Technical Manual](https://github.com/rejunity/tt05-psg-sn76489/blob/main/docs/SN76489AN_Manual.pdf) for more information.


      | Command    | Description                     | Parameters                                    |
      |------------|---------------------------------|-----------------------------------------------|
      | `1cc0ffff` | Set tone fine frequency         | `f` - 4 low bits, `c` - channel #             |
      | `00ffffff` | Follow up with coarse frequency | `f` - 6 high bits                             |      
      | `11100bff` | Set noise type and frequency    | `b` - white/periodic, `f` - frequency control |
      | `1cc1aaaa` | Set channel attenuation         | `a` - 4 bit attenuation, `c` - channel #      |

      | NF1 | NF0 | Noise frequency control       |
      |-----|-----|-------------------------------|
      | 0   |   0 | Clock divided by 512          |
      | 0   |   1 | Clock divided by 1024         |
      | 1   |   0 | Clock divided by 2048         |
      | 1   |   1 | Use channel #2 tone frequency |

      ### Note frequency

      Use the following formula to calculate the 10-bit value for a particular frequency:

      ```
      n = clock_frequency / (32 * note_frequency)
      ```

      For example 10-bit value that plays 440 Hz note on a chip clocked at 4 MHz would be:

      ```
      n = 4000000 / (32 * 400)
      n = 284 = h11C
      ```

      ### Data bus

      #### An example sequence of writes to the data bus.

      Remember to hold **/WE** LOW while writing to the data bus.

      ```
      10001100 - Set channel #0 tone 4 low bits to hC
      00010001 -    ---//---    tone 6 high bits to h11
      10010000 -    ---//---    volume to 100% (attenuation = 0)

      11100100 - Set channel #3, noise type to white and divider to 512
      11111000 -    ---//---    volume to 50% (attenuation = 8)
      ```

      ### Timing diagram
      ```
      CLK   ____      ____      ____      ____      ____      ____         
         __/    \____/    \____/    \____/    \____/    \____/    \___ ...
           |        |         |         |         |         |
           |        |         |         |         |         |
      
      /WE _       __        __        __        __        _______
           \_____/  \______/  \______/  \______/  \______/   *
                                                             ^
      D0..D7_______  ________  ________  ________  ________  |
         _/10001100\/00010001\/10010000\/11100100\/11111000\_|______
            chan#0    chan#0    chan#0    chan#3    chan#3   |
          tone=h??C   =h11C    atten=0    div=16    atten=8  |
            h011C = 440 Hz              /16 = ~1 Khz         |
                                       white noise           |
                                                             |
                                                       noise restarts
                                                  after /WE goes high and
                                           there was a write to noise register

      ```
      ### Externally configurable clock divider

      | SEL1 | SEL0 | Description                        | Clock frequency|
      |------|------|------------------------------------|----------------|
      | 0    |    0 | SN76489 mode, clock divided by 16  | 3.5 .. 4.2 MHz |
      | 1    |    1 |           -----//-----             | 3.5 .. 4.2 MHz |
      | 0    |    1 | SN76494 mode, no clock divider     | 250 .. 500 kHZ |
      | 1    |    0 | New mode for TT05, clock div. 128  |  25 .. 50  MHz |


# A description of what the inputs do
  inputs:               
    - D0 data bus
    - D1 data bus
    - D2 data bus
    - D3 data bus
    - D4 data bus
    - D5 data bus
    - D6 data bus
    - D7 data bus
# A description of what the outputs do
  outputs:
    - digital audio LSB
    - digital audio
    - digital audio
    - digital audio
    - digital audio
    - digital audio
    - digital audio
    - digital audio MSB
# A description of what the bidirectional I/O pins do
  bidirectional:
    - (in)  **/WE** write enable
    - (in)  **SEL0** 0 = clock div 16, 1 = no divider (SN94624/SN76494 mode)
    - (in)  **SEL1** 0 = clock div 16, 1 = clock div 128
    - (out) channel 0 (PWM)
    - (out) channel 1 (PWM)
    - (out) channel 2 (PWM)
    - (out) channel 3 (PWM)
    - (out) AUDIO OUT master (PWM)

# The following fields are optional
  tag:          "psg, music, sound" # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "DAC (for ex. Digilent R2R PMOD), RC filter, amplifier, speaker" # Describe any external hardware needed
  discord:      "rzioma"  # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "README.md" # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     4000000   # Clock frequency in Hz (if required)
  picture:      "docs/SN76489_chip_pinout_and_block_diagram.jpg" # relative path to a picture in your repository (must be 512kb or less)
